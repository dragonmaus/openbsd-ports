$OpenBSD: patch-bgs_c,v 1.2 2015/05/23 11:58:19 jung Exp $
Index: bgs.c
--- bgs.c.orig
+++ bgs.c
@@ -6,13 +6,13 @@
 #include <math.h>
 #include <stdlib.h>
 #include <stdio.h>
+#include <X11/Xatom.h>
 #include <X11/Xlib.h>
 #include <Imlib2.h>
 #ifdef XINERAMA
 #include <X11/extensions/Xinerama.h>
 #endif
 
-/* macros */
 #define MIN(a, b)       ((a) < (b) ? (a) : (b))
 #define MAX(a, b)       ((a) > (b) ? (a) : (b))
 #define LENGTH(x)       (sizeof x / sizeof x[0])
@@ -20,12 +20,10 @@
 /* image modes */
 enum { ModeCenter, ModeZoom, ModeScale, ModeLast };
 
-/* typedefs */
-typedef struct {
+struct Monitor {
 	int x, y, w, h;
-} Monitor;
+};
 
-/* function declarations */
 static void cleanup(void);                                /* frees images before exit. */
 static void die(const char *errstr);                      /* prints errstr to strerr and exits. */
 static void drawbg(void);                                 /* draws background to root. */
@@ -34,8 +32,7 @@ static void setup(char *paths[], int c, const char *co
 static void updategeom(void);                             /* updates screen and/or Xinerama
                                                              dimensions */
 
-/* variables */
-static int sx, sy, sw, sh;	/* geometry of the screen */
+static int sx, sy, sw, sh;		/* screen geometry */
 static unsigned int mode = ModeScale;	/* image mode */
 static Bool rotate = True;
 static Bool running = False;
@@ -43,10 +40,10 @@ static Display *dpy;
 static Window root;
 static int nmonitor, nimage;	/* Amount of monitors/available background
 				   images */
-static Monitor monitors[8];
+static struct Monitor monitors[8];
 static Imlib_Image images[LENGTH(monitors)];
 
-/* function implementations */
+/* free images before exit */
 void
 cleanup(void) {
 	int i;
@@ -64,14 +61,59 @@ die(const char *errstr) {
 }
 
 void
+getatomprop(Atom atom, Atom *type, unsigned char **data) {
+	int format;
+	unsigned long length, after;
+
+	XGetWindowProperty(dpy, root, atom, 0L, 1L, False, AnyPropertyType,
+			type, &format, &length, &after, data);
+}
+
+/* Taken from hsetroot. */
+Bool
+set_root_atoms(Pixmap pm) {
+	Atom atom_root, atom_eroot, type;
+	unsigned char *data_root, *data_eroot;
+
+	/* Doing this to clean up after old background. */
+	atom_root = XInternAtom(dpy, "_XROOTMAP_ID", True);
+	atom_eroot = XInternAtom(dpy, "ESETROOT_PMAP_ID", True);
+
+	if(atom_root != None && atom_eroot != None) {
+		getatomprop(atom_root, &type, &data_root);
+		if(type == XA_PIXMAP) {
+			getatomprop(atom_eroot, &type, &data_eroot);
+			if(data_root && data_eroot && type == XA_PIXMAP &&
+			   *((Pixmap *) data_root) == *((Pixmap *) data_eroot))
+				XKillClient(dpy, *((Pixmap *) data_root));
+		}
+	}
+
+	/* Setting new background atoms. */
+	atom_root = XInternAtom(dpy, "_XROOTPMAP_ID", False);
+	atom_eroot = XInternAtom(dpy, "ESETROOT_PMAP_ID", False);
+
+	if(atom_root == None || atom_eroot == None)
+		return False;
+
+	XChangeProperty(dpy, root, atom_root, XA_PIXMAP, 32, PropModeReplace,
+			(unsigned char *) &pm, 1);
+	XChangeProperty(dpy, root, atom_eroot, XA_PIXMAP, 32, PropModeReplace,
+			(unsigned char *) &pm, 1);
+
+	return True;
+}
+
+/* draw background to root */
+void
 drawbg(void) {
 	int i, w, h, nx, ny, nh, nw, tmp;
 	double factor;
 	Pixmap pm;
 	Imlib_Image tmpimg, buffer;
 
-	pm = XCreatePixmap(dpy, root, sw, sh, DefaultDepth(dpy,
-				DefaultScreen(dpy)));
+	pm = XCreatePixmap(dpy, root, sw, sh,
+			   DefaultDepth(dpy, DefaultScreen(dpy)));
 	if(!(buffer = imlib_create_image(sw, sh)))
 		die("Error: Cannot allocate buffer.\n");
 	imlib_context_set_image(buffer);
@@ -85,7 +127,7 @@ drawbg(void) {
 			die("Error: Cannot clone image.\n");
 		imlib_context_set_image(tmpimg);
 		if(rotate && ((monitors[i].w > monitors[i].h && w < h) ||
-				(monitors[i].w < monitors[i].h && w > h))) {
+		   (monitors[i].w < monitors[i].h && w > h))) {
 			imlib_image_orientate(1);
 			tmp = w;
 			w = h;
@@ -94,33 +136,35 @@ drawbg(void) {
 		imlib_context_set_image(buffer);
 		switch(mode) {
 		case ModeCenter:
-			nw = (monitors[i].w - w) / 2;
-			nh = (monitors[i].h - h) / 2;
-			nx = monitors[i].x + (monitors[i].w - nw) / 2;
-			ny = monitors[i].y + (monitors[i].h - nh) / 2;
+			nw = w;
+			nh = h;
+			nx = (monitors[i].w - w) / 2;
+			ny = (monitors[i].h - h) / 2;
 			break;
 		case ModeZoom:
-			nw = monitors[i].w;
-			nh = monitors[i].h;
-			if(w > h && (w / h > (monitors[i].w / monitors[i].h))) {
+			if(((float)w / h) > ((float)monitors[i].w / monitors[i].h)) {
+				nh = monitors[i].h;
+				nw = nh * w / h;
 				nx = monitors[i].x + (monitors[i].w - nw) / 2;
-				ny = monitors[i].y + (int)ceil(h * nx / w) / 2;
+				ny = monitors[i].y;
 			}
 			else {
+				nw = monitors[i].w;
+				nh = nw * h / w;
 				ny = monitors[i].y + (monitors[i].h - nh) / 2;
-				nx = monitors[i].x + (int)ceil(w * ny / h) / 2;
+				nx = monitors[i].x;
 			}
 			break;
 		default: /* ModeScale */
 			factor = MAX((double)w / monitors[i].w,
-					(double)h / monitors[i].h);
+				     (double)h / monitors[i].h);
 			nw = w / factor;
 			nh = h / factor;
 			nx = monitors[i].x + (monitors[i].w - nw) / 2;
 			ny = monitors[i].y + (monitors[i].h - nh) / 2;
 		}
 		imlib_blend_image_onto_image(tmpimg, 0, 0, 0, w, h,
-				nx, ny, nw, nh);
+					     nx, ny, nw, nh);
 		imlib_context_set_image(tmpimg);
 		imlib_free_image();
 	}
@@ -130,17 +174,53 @@ drawbg(void) {
 	imlib_render_image_on_drawable(0, 0);
 	imlib_context_set_drawable(pm);
 	imlib_render_image_on_drawable(0, 0);
+
+	if(!set_root_atoms(pm))
+		fputs("Warning: Could not create atoms\n", stderr);
+
+	XKillClient(dpy, AllTemporary);
+	XSetCloseDownMode(dpy, RetainPermanent);
 	XSetWindowBackgroundPixmap(dpy, root, pm);
+	XClearWindow(dpy, root);
+	XFlush(dpy);
 	imlib_context_set_image(buffer);
 	imlib_free_image_and_decache();
-	XFreePixmap(dpy, pm);
 }
 
+/* update screen and/or Xinerama dimensions */
 void
+updategeom(void) {
+#ifdef XINERAMA
+	int i;
+	XineramaScreenInfo *info = NULL;
+
+	if(XineramaIsActive(dpy) &&
+	   (info = XineramaQueryScreens(dpy, &nmonitor))) {
+		nmonitor = MIN(nmonitor, LENGTH(monitors));
+		for(i = 0; i < nmonitor; i++) {
+			monitors[i].x = info[i].x_org;
+			monitors[i].y = info[i].y_org;
+			monitors[i].w = info[i].width;
+			monitors[i].h = info[i].height;
+		}
+		XFree(info);
+	}
+	else
+#endif
+	{
+		nmonitor = 1;
+		monitors[0].x = sx;
+		monitors[0].y = sy;
+		monitors[0].w = sw;
+		monitors[0].h = sh;
+	}
+}
+
+/* main loop */
+void
 run(void) {
 	XEvent ev;
 
-
 	for(;;) {
 		updategeom();
 		drawbg();
@@ -156,6 +236,7 @@ run(void) {
 	}
 }
 
+/* set up imlib and X */
 void
 setup(char *paths[], int c, const char *col) {
 	Visual *vis;
@@ -196,34 +277,6 @@ setup(char *paths[], int c, const char *col) {
 	imlib_context_set_color(color.red, color.green, color.blue, 255);
 }
 
-void
-updategeom(void) {
-#ifdef XINERAMA
-	int i;
-	XineramaScreenInfo *info = NULL;
-
-	if(XineramaIsActive(dpy) &&
-			(info = XineramaQueryScreens(dpy, &nmonitor))) {
-		nmonitor = MIN(nmonitor, LENGTH(monitors));
-		for(i = 0; i < nmonitor; i++) {
-			monitors[i].x = info[i].x_org;
-			monitors[i].y = info[i].y_org;
-			monitors[i].w = info[i].width;
-			monitors[i].h = info[i].height;
-		}
-		XFree(info);
-	}
-	else
-#endif
-	{
-		nmonitor = 1;
-		monitors[0].x = sx;
-		monitors[0].y = sy;
-		monitors[0].w = sw;
-		monitors[0].h = sh;
-	}
-}
-
 int
 main(int argc, char *argv[]) {
 	int opt;
@@ -232,20 +285,24 @@ main(int argc, char *argv[]) {
 	while((opt = getopt(argc, argv, "cC:Rvxz")) != -1)
 		switch(opt) {
 		case 'c':
-			mode = ModeCenter; break;
+			mode = ModeCenter;
+			break;
 		case 'C':
-			col = optarg; break;
+			col = optarg;
+			break;
 		case 'R':
-			rotate = False; break;
+			rotate = False;
+			break;
 		case 'v':
-			printf("bgs-"VERSION", © 2010 bgs engineers, see "
-					"LICENSE for details\n");
-			return 0;
+			printf("bgs-"VERSION", © 2010 bgs engineers, "
+			       "see LICENSE for details\n");
+			return EXIT_SUCCESS;
 		case 'x':
-			running = True; break;
+			running = True;
+			break;
 		case 'z':
-			mode = ModeZoom; break;
-		case '?': /* Fallthrough */
+			mode = ModeZoom;
+			break;
 		default:
 			die("usage: bgs [-v] [-c] [-C hex] [-z] [-R] [-x] [IMAGE]...\n");
 		}
